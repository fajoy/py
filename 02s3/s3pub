#!/usr/bin/env python
#ref https://github.com/boto/boto/blob/develop/docs/source/s3_tut.rst
import boto

from boto.s3.connection import S3Connection
from boto.s3.key import Key
import getopt, sys


def usage():
    print """useage: s3pub -b <bucket> -k <key> [-s <pub_second>] """

#ref https://github.com/boto/boto/blob/develop/boto/s3/key.py#L586
def s3pub_make_public(s3,bucket,key,sec=None):
    b = s3.get_bucket(bucket) 
    k=b.get_key(key)
    if isinstance(k,Key):
        if sec:
            url=k.generate_url(sec,force_http=True)
        else:
            k.make_public()
            url=k.generate_url(0,force_http=True,query_auth=False)
        print url
        acp = k.get_acl()
        for grant in acp.acl.grants:
            print grant.permission, grant.display_name, grant.email_address, grant.id
    else:
        print "No such key %s" % key

if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "b:k:s:",['bucket=','key=','sec='] )
    except getopt.GetoptError as err:
        print "Getopt Error."
        usage()
        sys.exit(2)

    bucket=None
    key=None
    sec=None
    for o, a in opts:
        if o in ("-b", "--bucekt"):
            bucket = a
        elif o in ("-k", "--key"):
            key = a
        elif o in ("-s", "--sec"):
            sec = int(a)
        else:
            print "error option : [%s]" ,o
            usage()

    if bucket is None or key is None:
        usage()
        sys.exit(0)

    #ref https://github.com/boto/boto/blob/develop/boto/s3/connection.py#L149   
    s3=boto.connect_s3()
    if sec:
        s3pub_make_public(s3,bucket,key,sec=sec)
    else:
        s3pub_make_public(s3,bucket,key)
