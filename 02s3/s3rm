#!/usr/bin/env python
#ref https://github.com/boto/boto/blob/develop/docs/source/s3_tut.rst
import boto

from boto.s3.connection import S3Connection
from boto.s3.key import Key
import getopt, sys


def usage():
    print """useage: s3rm -b <bucket> [-k <key> | -p <prefix> | -a] """

#ref https://github.com/boto/boto/blob/develop/boto/s3/key.py#L586
def s3rm_delete_by_key(s3,bucket,key):
    b = s3.get_bucket(bucket) 
    k=b.get_key(key)
    if isinstance(k,Key):
        print "deleted %s"%k.key
        k.delete()

def s3rm_delete_by_prefix(s3,bucket,prefix):
    b=s3.get_bucket(bucket)
    if not prefix.endswith("/"):
        prefix = prefix + "/"
    query=b.list(prefix=prefix)
    for k in query:
        if isinstance(k,Key):
            print "deleted %s"%k.key
            k.delete()

def s3rm_delete_all(s3,bucket):
    b=s3.get_bucket(bucket)
    query=b.list()
    for k in query:
        print "deleted %s"%k.key
        k.delete()


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "b:k:p:a",['bucket=','key=','prefix','all'] )
    except getopt.GetoptError as err:
        print "Getopt Error."
        usage()
        sys.exit(2)

    bucket=None
    key=None
    prefix=None
    rm_all=False
    for o, a in opts:
        if o in ("-b", "--bucekt"):
            bucket = a
        elif o in ("-k", "--key"):
            key = a
        elif o in ("-p", "--prefix"):
            prefix=a
        elif o in ("-a", "--all"):
            rm_all=True
        else:
            print "error option : [%s]" ,o
            usage()

    if bucket is None :
        usage()
        sys.exit(0)
    #ref https://github.com/boto/boto/blob/develop/boto/s3/connection.py#L149   
    s3=boto.connect_s3()
    if rm_all:
        s3rm_delete_all(s3,bucket)
        sys.exit(0)
    if prefix:
        s3rm_delete_by_prefix(s3,bucket,prefix)
        sys.exit(0)
    if key:
        s3rm_delete_by_key(s3,bucket,key)
        sys.exit(0)
